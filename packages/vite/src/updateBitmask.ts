import * as fs from 'fs'
//@ts-ignore
import yaml from 'yaml'
import * as path from 'path'
import { updateIfNew } from './tools'
import { capitalize } from 'vue'
import { headStamp } from './headstamp'

type BitwiseOperationNode =
  | {
      and?: BitwiseOperationNode[]
      or?: BitwiseOperationNode[]
      not?: BitwiseOperationNode[]
      xor?: BitwiseOperationNode[]
    }
  | string
type BitmaskParams = {
  bits?: string[]
  groups?: Record<string, BitwiseOperationNode | BitwiseOperationNode[]>
}

const templateBs = (name, { bits, groups, saved }) => {
  const lowName = name.toLowerCase()
  const capName = capitalize(lowName)
  const stateName = 'Bit' + capName
  const all = [...bits]
  groups && all.push(...Object.keys(groups))
  return {
    name,
    capName,
    lowName,
    stateName,
    instanse: `
export const instance${capName} = bitmaskBuilder(
    ${JSON.stringify(bits)} as const,
    ${groups ? JSON.stringify(groups) : ''}
)
export const ${stateName} = instance${capName}.stateBuilder(1, '${saved ? stateName : false}')
`,
    vue: `${lowName}: IBits${capName},
      ${lowName}Is(masks:number):boolean`,
    types: `interface IBits${capName} {
    ${all.map((n) => n + ': boolean').join('\n\t')}
}`,
  }
}

export function createBitmaskWriter(outDir) {
  return async (file) =>
    new Promise((done) =>
      fs.readFile(file, (err, bytes) => {
        if (!err) {
          const data = yaml.parse(bytes.toString())
          const moduleName = path.basename(file).replace('.yaml', '')
          const params = []
          Object.keys(data).forEach((name) => {
            let p = parseYaml(data[name]) as any
            params.push(templateBs(name, p))
          })
          const files = makeTemplate(params, moduleName)
          const bitmasks = updateIfNew(path.resolve(outDir, moduleName + '.ts'), files.ts)
          updateIfNew(path.resolve(outDir, moduleName + '.d.ts'), files.dts)
          done({ bitmasks })
        } else {
          done(false)
        }
      }),
    )
}

function makeTemplate(params: ReturnType<typeof templateBs>[], moduleName: string) {
  let ts = `${headStamp}

import {bitmaskBuilder} from "@alaq/bitmask";
import {reactive} from "vue";
${params.map((p) => p.instanse).join('\n')}

export default function ${moduleName}VueSetup(app){
  const bit = {}
    ${params
      .map(
        (p) => `
  const reactive${p.capName} = reactive({})
  bit.${p.lowName} = reactive${p.capName}
  bit.${p.lowName}Is = v => (reactiveRole._flagValue & v) === v
  ${p.stateName}.values.up(v=>Object.assign(reactive${p.capName}, v, {_flagValue: ${p.stateName}.flag.value}))`,
      )
      .join('\n\t')}

  app.config.globalProperties.$bit = bit
}
    `
  let dts = `
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by alak
${params.map((p) => p.types).join('\n')}
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $bit:{
          ${params.map((p) => p.vue).join(',\n\t\t\t\t')}
        }
    }
}
export{}
    `
  return { ts, dts }
}

function parseYaml(items) {
  const params = {} as BitmaskParams
  if (Array.isArray(items)) {
    params.bits = items
  } else {
    Object.keys(items).forEach((key) => {
      const v = items[key]
      switch (key) {
        case 'saved':
        case 'bits':
          params[key] = v
          break
        case 'groups':
          params.groups = {}
          Object.keys(v).forEach((gn) => {
            params.groups[gn] = v[gn]
          })
          break
      }
    })
  }
  return params
}
